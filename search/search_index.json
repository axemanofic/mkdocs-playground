{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Get Started","text":"<p>dj-raw-sql is just a wrapper over the standard Django query</p> <p>This demo shows how to get the record(s) from the database</p> <p>Example:</p> queries.py<pre><code>def get_music_by_id(id: int):\n    return \"SELECT * FROM dj_app_music WHERE id = %s\", (id,)\n</code></pre> models.py<pre><code>from django.db import models\n\n# Our demo model\nclass Music(models.Model):\n    name = models.CharField(max_length=150)\n    create_at = models.DateTimeField(auto_now_add=True)\n    update_at = models.DateTimeField(auto_now=True)\n    is_delete = models.BooleanField(default=False)\n</code></pre> views.py<pre><code>from django.http import JsonResponse\nfrom django.views import View\n\nfrom my_app.queries import get_music_by_id\n\nfrom dj_raw_sql import QueryExecutor\n\n\nclass MyView(View):\n    def get(self, request, *args, **kwargs):\n        music: tuple[tuple] = QueryExecutor.fetchone(get_music_by_id, id=1)\n        return JsonResponse({\"name\": music[0][1]})\n</code></pre>"},{"location":"any/","title":"dj-raw-sql","text":"<p>dj-raw-sql is just a wrapper over the standard Django query</p> <p>This demo shows how to get the record(s) from the database</p> <p>Example:</p> queries.py<pre><code>def get_music_by_id(id: int):\n    return \"SELECT * FROM dj_app_music WHERE id = %s\", (id,)\n</code></pre> models.py<pre><code>from django.db import models\n\n# Our demo model\nclass Music(models.Model):\n    name = models.CharField(max_length=150)\n    create_at = models.DateTimeField(auto_now_add=True)\n    update_at = models.DateTimeField(auto_now=True)\n    is_delete = models.BooleanField(default=False)\n</code></pre> views.py<pre><code>from django.http import JsonResponse\nfrom django.views import View\n\nfrom my_app.queries import get_music_by_id\n\nfrom dj_raw_sql import QueryExecutor\n\n\nclass MyView(View):\n    def get(self, request, *args, **kwargs):\n        music: tuple[tuple] = QueryExecutor.fetchone(get_music_by_id, id=1)\n        return JsonResponse({\"name\": music[0][1]})\n</code></pre>"},{"location":"any/#benchmarks","title":"Benchmarks","text":"<p>Q: How were performance tests conducted?</p> <p>A: tests/test_collection/ performance tests are located here. A dataset of 5000 elements was generated and loaded into the database. Then the query \"SELECT * FROM dj_app_music LIMIT %s\" was called, where the value of LIMIT changed from 10 to 5000 in each test.</p> <p>Test results</p> Number of items fetchall to_ordereddict=True 10 0.00006 0.00011 100 0.00017 0.00025 1000 0.00138 0.00207 5000 0.00658 0.01052"},{"location":"any/#improve-project","title":"Improve project","text":"<p>If you want to improve the project then create \"Issues\" . If you want to help with writing tests or typing, create a \"pull request\".</p>"},{"location":"executors/ordereddict_query_executor/","title":"OrderedDictQueryExecutor","text":"<p>This class inherits from QueryExecutor and modifies methods for outputting data.</p> <p>Changed Methods:</p> <ol> <li>fetchall - returns list[OrderedDict], i.e. suitable for queries like 'SELECT * FROM table'</li> <li>fetchone - returns one entry as a OrderedDict</li> </ol> <p>Example:</p> queries.py<pre><code>def get_all_music():\n    return \"SELECT * FROM dj_app_music\"\n\ndef get_music_by_id(id: int):\n    return \"SELECT * FROM dj_app_music\", (id,)\n</code></pre> models.py<pre><code>from django.db import models\n\n# Our demo model\nclass Music(models.Model):\n    name = models.CharField(max_length=150)\n    create_at = models.DateTimeField(auto_now_add=True)\n    update_at = models.DateTimeField(auto_now=True)\n    is_delete = models.BooleanField(default=False)\n</code></pre> views.py<pre><code>from django.http import JsonResponse\nfrom django.views import View\n\nfrom my_app.queries import get_music_by_id\n\nfrom dj_raw_sql import OrderedDictQueryExecutor\n\n\nclass AllMusicView(View):\n    def get(self, request, *args, **kwargs):\n        musics: tuple[tuple] = OrderedDictQueryExecutor.fetchall(get_all_music)\n        result = []\n\n        for music in musics:\n            result.append({\"id\": music[\"id\"], \"name\": music[\"name\"]})\n\n        return JsonResponse({\"result\":result})\n\n\nclass MusicView(View):\n    def get(self, request, *args, **kwargs):\n\n        music: tuple[tuple] = OrderedDictQueryExecutor.fetchone(get_music_by_id, id=1)\n\n        return JsonResponse({\"result\": music[\"name\"]})\n</code></pre>"},{"location":"executors/query_executor/","title":"QueryExecutor","text":"<p>This class executes basic DB-API queries.</p> <p>The class has 3 methods:</p> <ol> <li>fetchall - returns list[tuple], i.e. suitable for queries like 'SELECT * FROM table'</li> <li>fetchone - returns one entry as a tuple</li> <li>execute - executes a query and returns no result suitable for INSERT, UPDATE, DELETE</li> </ol> <p>Example:</p> queries.py<pre><code>def get_all_music():\n    return \"SELECT * FROM dj_app_music\"\n\ndef get_music_by_id(id: int):\n    return \"SELECT * FROM dj_app_music\", (id,)\n</code></pre> models.py<pre><code>from django.db import models\n\n# Our demo model\nclass Music(models.Model):\n    name = models.CharField(max_length=150)\n    create_at = models.DateTimeField(auto_now_add=True)\n    update_at = models.DateTimeField(auto_now=True)\n    is_delete = models.BooleanField(default=False)\n</code></pre> views.py<pre><code>from django.http import JsonResponse\nfrom django.views import View\n\nfrom my_app.queries import get_music_by_id\n\nfrom dj_raw_sql import QueryExecutor\n\n\nclass AllMusicView(View):\n    def get(self, request, *args, **kwargs):\n        musics: tuple[tuple] = QueryExecutor.fetchall(get_all_music)\n        result = []\n\n        for music in musics:\n            result.append({\"id\": music[0], \"name\": music[1]})\n\n        return JsonResponse({\"result\":result})\n\n\nclass MusicView(View):\n    def get(self, request, *args, **kwargs):\n        music: tuple = QueryExecutor.fetchone(get_music_by_id, id=1)\n        return JsonResponse({\"result\": music[1]})\n</code></pre>"},{"location":"references/api/","title":"API","text":""},{"location":"references/api/#dj_raw_sql","title":"dj_raw_sql","text":""},{"location":"references/api/#dj_raw_sql.BaseExecutor","title":"BaseExecutor","text":"<p>               Bases: <code>Protocol</code></p>"},{"location":"references/api/#dj_raw_sql.BaseExecutor.fetchall","title":"fetchall  <code>abstractmethod</code>","text":"<pre><code>fetchall(query)\n</code></pre>"},{"location":"references/api/#dj_raw_sql.BaseExecutor.fetchone","title":"fetchone  <code>abstractmethod</code>","text":"<pre><code>fetchone(query)\n</code></pre>"},{"location":"references/api/#dj_raw_sql.BaseExecutor.execute","title":"execute  <code>abstractmethod</code>","text":"<pre><code>execute(query)\n</code></pre>"},{"location":"references/api/#dj_raw_sql.Executor","title":"Executor","text":"<p>               Bases: <code>BaseExecutor</code></p>"},{"location":"references/api/#dj_raw_sql.Executor.fetchall","title":"fetchall","text":"<pre><code>fetchall(query)\n</code></pre>"},{"location":"references/api/#dj_raw_sql.Executor.fetchone","title":"fetchone","text":"<pre><code>fetchone(query)\n</code></pre>"},{"location":"references/api/#dj_raw_sql.Executor.execute","title":"execute","text":"<pre><code>execute(query)\n</code></pre>"},{"location":"references/api/#dj_raw_sql.BaseQuery","title":"BaseQuery","text":"<p>               Bases: <code>Protocol</code></p>"},{"location":"references/api/#dj_raw_sql.BaseQuery.sql","title":"sql  <code>abstractmethod</code> <code>property</code>","text":"<pre><code>sql\n</code></pre>"},{"location":"references/api/#dj_raw_sql.BaseQuery.params","title":"params  <code>abstractmethod</code> <code>property</code>","text":"<pre><code>params\n</code></pre>"},{"location":"references/api/#dj_raw_sql.Query","title":"Query","text":"<pre><code>Query(raw_sql, params=None)\n</code></pre> <p>               Bases: <code>BaseQuery</code></p>"},{"location":"references/api/#dj_raw_sql.Query.sql","title":"sql  <code>property</code>","text":"<pre><code>sql\n</code></pre> <p>The sql property.</p>"},{"location":"references/api/#dj_raw_sql.Query.params","title":"params  <code>property</code>","text":"<pre><code>params\n</code></pre>"},{"location":"references/api/#dj_raw_sql.BaseQueryResult","title":"BaseQueryResult","text":"<p>               Bases: <code>Protocol</code></p>"},{"location":"references/api/#dj_raw_sql.BaseQueryResult.query_result","title":"query_result  <code>abstractmethod</code> <code>property</code>","text":"<pre><code>query_result\n</code></pre>"},{"location":"references/api/#dj_raw_sql.QueryResult","title":"QueryResult","text":"<pre><code>QueryResult(rows, columns, sql, params)\n</code></pre> <p>               Bases: <code>BaseQueryResult</code></p>"},{"location":"references/api/#dj_raw_sql.QueryResult.sql","title":"sql  <code>instance-attribute</code>","text":"<pre><code>sql = sql\n</code></pre>"},{"location":"references/api/#dj_raw_sql.QueryResult.params","title":"params  <code>instance-attribute</code>","text":"<pre><code>params = params\n</code></pre>"},{"location":"references/api/#dj_raw_sql.QueryResult.query_result","title":"query_result  <code>property</code>","text":"<pre><code>query_result\n</code></pre>"}]}